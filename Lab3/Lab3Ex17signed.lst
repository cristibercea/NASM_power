     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 FA                          a db -6
    15 00000001 0700                        b dw 7
    16 00000003 FEFFFFFF                    c dd -2
    17 00000007 0300000000000000            d dq 3
    18 0000000F 0000000000000000            aux dq 0
    19                                  ; our code starts here
    20                                  
    21                                  ;(c+d-a)-(d-c)-b=(-2+3+6)-(3+2)-7=7-5-7=-5
    22                                  
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 A1[03000000]                    mov eax, [c]
    27 00000005 99                              cdq
    28 00000006 0305[07000000]                  add eax, dword[d+0]
    29 0000000C 1315[0B000000]                  adc edx, dword[d+4]
    30 00000012 89D1                            mov ecx,edx
    31 00000014 89C3                            mov ebx,eax
    32 00000016 0FBE05[00000000]                movsx eax, byte[a]
    33 0000001D 99                              cdq
    34 0000001E 29C3                            sub ebx, eax
    35 00000020 19D1                            sbb ecx, edx
    36 00000022 891D[0F000000]                  mov dword[aux+0], ebx
    37 00000028 890D[13000000]                  mov dword[aux+4], ecx    ;aux=c+d-a
    38 0000002E 8B1D[07000000]                  mov ebx, dword[d+0]
    39 00000034 8B0D[0B000000]                  mov ecx, dword[d+4]
    40 0000003A A1[03000000]                    mov eax, [c]
    41 0000003F 99                              cdq
    42 00000040 29C3                            sub ebx, eax
    43 00000042 19D1                            sbb ecx, edx             ;d-c
    44 00000044 A1[0F000000]                    mov eax, dword[aux+0]
    45 00000049 8B15[13000000]                  mov edx, dword[aux+4]
    46 0000004F 29D8                            sub eax, ebx
    47 00000051 19CA                            sbb edx, ecx             ;(c+d-a)-(d-c)
    48 00000053 89C3                            mov ebx, eax
    49 00000055 89D1                            mov ecx, edx
    50 00000057 0FBF05[01000000]                movsx eax, word[b]
    51 0000005E 99                              cdq
    52 0000005F 29C3                            sub ebx, eax
    53 00000061 19D1                            sbb ecx, edx             ;(c+d-a)-(d-c)-b
    54                                          ; exit(0)
    55 00000063 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000065 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
