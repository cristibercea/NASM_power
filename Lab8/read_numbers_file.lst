     1                                  ; sa se citeasca 2 numere  a si b din fisier1.txt. 
     2                                  ; Sa se afiseze in fisierul 2 rezultatul operatiei a/b in fisier2.
     3                                  
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                                            
    14                                                            extern exit, fopen, fprintf, fclose, fscanf
    15                                  import exit msvcrt.dll
    16                                  import fopen msvcrt.dll
    17                                  import fprintf msvcrt.dll
    18                                  import fscanf msvcrt.dll
    19                                  import fclose msvcrt.dll
    20                                  
    21                                  
    22                                  ; our data is declared here (the variables needed by our program)
    23                                  segment data use32 class=data
    24                                      ; ...
    25                                  
    26 00000000 646563697469742E74-          fisier1 db "decitit.txt", 0   ; filename to be created
    26 00000009 787400             
    27 0000000C 64656166697361742E-          fisier2 db "deafisat.txt",0
    27 00000015 74787400           
    28 00000019 7700                         access_mode2 db "w", 0       ; file access mode:
    29 0000001B 7200                         access_mode1 db "r", 0       ; file access mode:
    30                                                                  ; w - creates an empty file for writing ; r - for reading
    31 0000001D FFFFFFFF                    descriptor1 dd -1       ; variable to hold the file descriptor for fisier1
    32 00000021 FFFFFFFF                    descriptor2 dd -1       ; ; variable to hold the file descriptor for fisier2
    33 00000025 746578742064652061-         text db "text de afisat extra", 0  ; text to be write to file
    33 0000002E 666973617420657874-
    33 00000037 726100             
    34 0000003A 00000000                    a dd 0
    35 0000003E 00000000                    b dd 0
    36 00000042 00000000                    cat dd 0
    37 00000046 00000000                    restul dd 0
    38 0000004A 256400                     format_citire db '%d', 0
    39 0000004D 2043656C6520646F75-         format_mesaj_afisare db ' Cele doua numere citite sunt a= %d si b=%d', 0
    39 00000056 61206E756D65726520-
    39 0000005F 636974697465207375-
    39 00000068 6E7420613D20256420-
    39 00000071 736920623D256400   
    40 00000079 2052657A756C746174-        format_mesaj_afisare2 db ' Rezultatul operatiei %d / %d este: catul = %d si restul = %d', 0
    40 00000082 756C206F7065726174-
    40 0000008B 696569202564202F20-
    40 00000094 256420657374653A20-
    40 0000009D 636174756C203D2025-
    40 000000A6 642073692072657374-
    40 000000AF 756C203D20256400   
    41 000000B7 0A00                       linie_noua db 10, 0
    42                                      
    43                                  
    44                                  ; our code starts here
    45                                  segment code use32 class=code
    46                                      start:
    47                                          ; ...
    48                                          ; call fopen() to open the file for reading
    49                                          ; fopen() will return a file descriptor in the EAX or 0 in case of error
    50                                          ; eax = fopen(file_name, access_mode)
    51 00000000 68[1B000000]                    push dword access_mode1    
    52 00000005 68[00000000]                    push dword fisier1
    53 0000000A FF15[00000000]                  call [fopen]
    54 00000010 83C408                          add esp, 4*2                ; clean-up the stack
    55 00000013 A3[1D000000]                    mov [descriptor1], eax  ; store the file descriptor returned by fopen
    56                                          
    57                                          ; check if fopen() has successfully created the file (EAX != 0)
    58 00000018 83F800                          cmp eax, 0
    59 0000001B 0F84E8000000                    je final
    60                                          
    61                                          ; daca a reusit citirea:
    62                                          ;citire din fiser1 folosind fscanf        
    63                                          ; citire primul nr a din fisier
    64 00000021 68[3A000000]                    push dword a
    65 00000026 68[4A000000]                    push dword format_citire
    66 0000002B FF35[1D000000]                  push dword [descriptor1]
    67 00000031 FF15[00000000]                  call [fscanf]
    68 00000037 83C40C                          add esp, 4*3
    69                                          
    70                                          ; citire al doilea nr din fisier: b
    71 0000003A 68[3E000000]                    push dword b 
    72 0000003F 68[4A000000]                    push dword format_citire
    73 00000044 FF35[1D000000]                  push dword [descriptor1]
    74 0000004A FF15[00000000]                  call [fscanf]
    75 00000050 83C40C                          add esp, 4*3
    76                                          
    77                                          ; call fopen() to create the file
    78                                          ; fopen() will return a file descriptor in the EAX or 0 in case of error
    79                                          ; eax = fopen(file_name, access_mode)
    80 00000053 68[19000000]                    push dword access_mode2   
    81 00000058 68[0C000000]                    push dword fisier2
    82 0000005D FF15[00000000]                  call [fopen]
    83 00000063 83C408                          add esp, 4*2                ; clean-up the stack
    84                                  
    85 00000066 A3[21000000]                    mov [descriptor2], eax  ; store the file descriptor returned by fopen
    86                                          
    87                                          ; check if fopen() has successfully created the file (EAX != 0)
    88 0000006B 83F800                          cmp eax, 0
    89 0000006E 0F8495000000                    je final
    90                                          
    91                                          ;daca e totul ok, efectuam calculele
    92 00000074 A1[3A000000]                    mov eax, [a]
    93 00000079 99                              cdq 
    94 0000007A F73D[3E000000]                  idiv dword[b] 
    95 00000080 A3[42000000]                    mov [cat], eax
    96 00000085 8915[46000000]                  mov [restul], edx
    97                                          
    98                                          
    99                                          ;afisare mesaj in fisier2
   100                                          
   101 0000008B FF35[3E000000]                  push dword [b]
   102 00000091 FF35[3A000000]                  push dword [a]
   103 00000097 68[4D000000]                    push dword format_mesaj_afisare
   104 0000009C FF35[21000000]                  push dword [descriptor2]
   105 000000A2 FF15[00000000]                  call [fprintf]
   106 000000A8 83C410                          add esp, 4*4
   107                                  
   108                                          ;trecere pe linie noua
   109                                           
   110 000000AB 68[B7000000]                    push dword linie_noua
   111 000000B0 FF35[21000000]                  push dword [descriptor2]
   112 000000B6 FF15[00000000]                  call [fprintf]
   113 000000BC 83C408                          add esp, 4*2
   114                                          
   115                                  
   116                                         ; write the text to file using fprintf()
   117                                          ; fprintf(file_descriptor, text)
   118                                         
   119                                         ;format_mesaj_afisare2 db ' Rezultatul operatiei %d / %d este: catul = %d si restul = %d', 0
   120 000000BF FF35[46000000]                  push dword [restul]
   121 000000C5 FF35[42000000]                  push dword [cat]
   122 000000CB FF35[3E000000]                  push dword [b]
   123 000000D1 FF35[3A000000]                  push dword [a]
   124 000000D7 68[79000000]                    push dword format_mesaj_afisare2
   125 000000DC FF35[21000000]                  push dword [descriptor2]
   126 000000E2 FF15[00000000]                  call [fprintf]
   127 000000E8 83C418                          add esp, 4*6
   128                                  
   129                                          ; call fclose() to close the file
   130                                          ; fclose(file_descriptor)
   131 000000EB FF35[21000000]                  push dword [descriptor2]
   132 000000F1 FF15[00000000]                  call [fclose]
   133 000000F7 83C404                          add esp, 4*1
   134                                          
   135 000000FA FF35[1D000000]                   push dword [descriptor1]
   136 00000100 FF15[00000000]                  call [fclose]
   137 00000106 83C404                          add esp, 4*1
   138                                  
   139                                  
   140                                        final:
   141                                  
   142                                      
   143                                          ; exit(0)
   144 00000109 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   145 0000010B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
   146                                      ;add esp, 4*1
