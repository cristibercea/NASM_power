     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 CB95                        a dw 1001010111001011b ;a=a(15)a(12)a(13)...a(1)a(0) (cifre binare)
    15 00000002 86A4                        b dw 1010010010000110b ;b=b(15)b(12)b(13)...b(1)b(0) (cifre binare)
    16 00000004 00000000                    c dd 0 ;c=c(31)c(30)c(29)...c(1)c(0) (cifre binare)
    17                                      ;c(16->31)==a
    18                                      ;c(9->15)==a(3->9)
    19                                      ;c(3->8)==b(0->5)
    20                                      ;c(0->2)==a(12->14)
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 66A1[00000000]                  mov ax, [a]
    26 00000006 0FB7C0                          movzx eax, ax
    27 00000009 0905[04000000]                  or dword[c], eax  ;c(31->16)==ab
    28                                          
    29 0000000F C125[04000000]07                shl dword[c], 7 ;c(31->9)==a0000000b
    30                                          
    31 00000016 66A1[00000000]                  mov ax, [a]
    32 0000001C 66C1E006                        shl ax, 6   ;ax=0111001011000000b
    33 00000020 66C1E809                        shr ax, 9   ;ax=0000000000111001b
    34 00000024 0FB7C0                          movzx eax, ax
    35 00000027 0905[04000000]                  or dword[c], eax ;c(31->9)==a0111001b
    36                                          
    37 0000002D C125[04000000]06                shl dword[c], 6 ;c(31->3)==a0111001000000b
    38                                          
    39 00000034 66A1[02000000]                  mov ax, [b]
    40 0000003A 66C1E00A                        shl ax, 10 ;ax=0001100000000000b
    41 0000003E 66C1E80A                        shr ax, 10 ;ax=0000000000000110b
    42 00000042 0FB7C0                          movzx eax, ax
    43 00000045 0905[04000000]                  or dword[c], eax ;c(31->3)==a0111001000110b
    44                                          
    45 0000004B C125[04000000]03                shl dword[c], 3 ;c(31->0)==a0111001000110000b
    46                                          
    47 00000052 66A1[00000000]                  mov ax, [a]
    48 00000058 66D1E0                          shl ax, 1    ;ax=0010101110010110b
    49 0000005B 66C1E80D                        shr ax, 13   ;ax=0000000000000001b
    50 0000005F 0FB7C0                          movzx eax, ax
    51 00000062 0905[04000000]                  or dword[c], eax ;c==1001 0101 1100 1011 0111 0010 0011 0001b
    52                                          
    53                                          ; exit(0)
    54 00000068 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 0000006A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
