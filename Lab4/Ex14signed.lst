     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 F9                          a db -7
    15 00000001 0300                        b dw 3
    16 00000003 F6FFFFFF                    c dd -10
    17 00000007 FBFFFFFFFFFFFFFF            x dq -5
    18                                  ; our code starts here
    19                                  ;x+(2-a*b)/(a*3)-a+c=-5+(2+21)/-21+7-10=-9
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 660FBE05[00000000]              movsx ax, byte[a]
    24 00000008 66F72D[01000000]                imul word[b]
    25 0000000F 6652                            push dx
    26 00000011 6650                            push ax
    27 00000013 58                              pop eax
    28 00000014 BB02000000                      mov ebx, 2
    29 00000019 29C3                            sub ebx, eax
    30 0000001B A0[00000000]                    mov al, [a]
    31 00000020 B103                            mov cl, 3
    32 00000022 F6E9                            imul cl
    33 00000024 6689C1                          mov cx,ax
    34 00000027 53                              push ebx
    35 00000028 6658                            pop ax
    36 0000002A 665A                            pop dx
    37 0000002C 66F7F9                          idiv cx     ;ax=(2-a*b)/(a*3)
    38 0000002F 6699                            cwd
    39 00000031 99                              cdq
    40 00000032 8B1D[07000000]                  mov ebx, dword[x+0]
    41 00000038 8B0D[0B000000]                  mov ecx, dword[x+4]
    42 0000003E 01C3                            add ebx, eax
    43 00000040 11D1                            adc ecx, edx  ;x+(2-a*b)/(a*3)
    44 00000042 0FBE05[00000000]                movsx eax, byte[a]
    45 00000049 99                              cdq
    46 0000004A 29C3                            sub ebx, eax
    47 0000004C 19D1                            sbb ecx, edx  ;x+(2-a*b)/(a*3)-a
    48 0000004E A1[03000000]                    mov eax, [c]
    49 00000053 99                              cdq
    50 00000054 01D8                            add eax, ebx
    51 00000056 11D1                            adc ecx, edx
    52                                          ; exit(0)
    53 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
